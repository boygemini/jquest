"use strict";
import Questions, {
    feedBacks
} from "./questions.js";
const body = document.querySelector("#body"),
    logo = document.querySelector("#logo"),
    html = document.getElementsByTagName("html"),
    controlButtons = document.querySelector(".control-buttons"),
    pTicle = document.querySelector(".particles-js-canvas-el"),
    backCircle = document.querySelector(".backcircle"),
    emailTextField = document.querySelector(".field-container"),
    introText = document.querySelector(".introtext"),
    rule = document.querySelector(".selection-rule"),
    emailSent = document.querySelector(".email-sent"),
    starBoy = document.querySelector(".big-thankyou"),
    textInputFields = document.querySelectorAll("input[type=email]"),
    textFieldLabels = document.querySelectorAll("label"),
    selectionChoice = document.querySelector(".selection-rule"),
    ContinueButton = document.getElementById("continue"),
    BackButton = document.querySelector(".back-button"),
    ChangeEmailButton = document.getElementById("changeemail"),
    svgCircle = document.getElementById("circle"),
    progressSVG = document.querySelector(".progress"),
    progress = document.querySelector(".percentage"),
    currentStage = document.querySelector(".current-stage"),
    errorMessage = document.querySelector(".error-message"),
    loaderDOM = document.querySelector(".loader"),
    changeEmailContainer = document.querySelector(".change-email"),
    emailBox = document.getElementById("emailchange"),
    editfield = document.getElementById("edit"),
    cancel = document.querySelector(".cancel"),
    changeEmail = document.querySelector(".saveemail"),
    inner = document.querySelector(".inner"),
    successText = document.querySelector(".sent-message"),
    errorText = document.querySelector(".error-text"),
    starterPage = document.querySelector(".q-container"),
    startQuestion = document.querySelector(".main-Q-container"),
    thankYou = document.querySelector(".thank-you"),
    emojis = document.querySelector(".emojis"),
    userEmail = document.getElementById("email"),
    userEmail2 = document.querySelector(".email"),
    emailRegex = new RegExp(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
let usersEmailAddress = !1,
    anim;

function animDebounce(e, t) {
    anim && clearTimeout(anim), anim = setTimeout(e, t)
}

function welcomeAnimation() {
    introText.classList.add("animate__fadeInLeftBig"), introText.style.setProperty("--animate-duration", "1s"), controlButtons.classList.add("animate__fadeInUp"), emailTextField.classList.add("animate__fadeInUp"), emailTextField.style.setProperty("--animate-duration", ".5s"), animDebounce(() => {
        introText.classList.remove("animate__fadeInLeftBig")
    }, 1e3)
}

function goingOutOfWelcome(e, t) {
    e.classList.add("animate__fadeOutLeft"), e.style.setProperty("--animate-duration", ".5s"), t.classList.add("animate__fadeInRight"), t.style.setProperty("--animate-duration", ".5s"), controlButtons.classList.remove("animate__fadeInUp"), controlButtons.classList.add("animate__fadeOutDown"), controlButtons.style.setProperty("--animate-duration", ".5s"), setTimeout(() => {
        controlButtons.classList.remove("animate__fadeOutDown"), controlButtons.classList.add("animate__fadeInUp")
    }, 500), emailTextField.classList.add("animate__fadeOutDown"), animDebounce(() => {
        emailTextField.classList.remove("animate__fadeOutDown"), e.classList.remove("animate__fadeOutLeft")
    }, 500)
}

function backToWelcome(e, t) {
    e.classList.remove("animate__fadeOutLeft"), e.classList.add("animate__fadeInLeft"), e.style.setProperty("--animate-duration", ".5s"), emailTextField.classList.add("animate__fadeInUp"), controlButtons.classList.add("animate__fadeOutDown"), setTimeout(() => {
        controlButtons.classList.remove("animate__fadeOutDown"), controlButtons.classList.add("animate__fadeInUp")
    }, 500), t.classList.add("animate__fadeOutRight"), t.style.setProperty("--animate-duration", ".5s"), animDebounce(() => {
        t.classList.remove("animate__fadeOutRight")
    }, 500)
}

function continueDuringSurvey(e, t) {
    e.classList.add("animate__fadeOutUp"), rule.classList.add("animate__fadeOutUp"), t.classList.add("animate__fadeOutDown"), animDebounce(() => {
        e.classList.replace("animate__fadeOutUp", "animate__fadeInDown"), rule.classList.replace("animate__fadeOutUp", "animate__fadeInDown"), t.classList.remove("animate__fadeOutDown"), setTimeout(() => {
            t.classList.add("animate__fadeInUp")
        }, 1)
    }, 500)
}

function submitingForm(e, t) {
    e.classList.add("animate__fadeOutLeft"), animDebounce(() => {
        e.classList.remove("animate__fadeOutLeft")
    }, 500), t.classList.add("animate__fadeInRight"), controlButtons.classList.remove("animate__fadeInUp"), controlButtons.classList.add("animate__fadeOutDown"), controlButtons.style.setProperty("--animate-duration", ".5s"), setTimeout(() => {
        controlButtons.classList.remove("animate__fadeOutDown"), controlButtons.classList.add("animate__fadeInUp")
    }, 400), emailSent.classList.add("animate__fadeInUp"), emailSent.style.setProperty("--animation-delay", "5s"), starBoy.classList.remove("animate__fadeOut"), starBoy.classList.add("animate__heartBeat"), starBoy.style.setProperty("--animation-duration", ".3s")
}

function backToForm(e, t) {
    controlButtons.classList.remove("animate__fadeInUp"), controlButtons.classList.add("animate__fadeOutDown"), controlButtons.style.setProperty("--animate-duration", ".5s"), setTimeout(() => {
        controlButtons.classList.remove("animate__fadeOutDown"), controlButtons.classList.add("animate__fadeInUp")
    }, 500), starBoy.classList.remove("animate__heartBeat"), starBoy.classList.add("animate__fadeOut"), starBoy.style.setProperty("--animation-duration", ".5s")
}
welcomeAnimation();
const showCircleSVG = e => {
    e ? svgCircle.classList.add("showCircle") : svgCircle.classList.remove("showCircle")
};
showCircleSVG(!1), ContinueButton.classList.add("widen"), window.screen.availWidth <= 480 && (currentStage.x.baseVal[0].value = 100, currentStage.y.baseVal[0].value = 145, ContinueButton.classList.add("widen"));
let REVIEW = new Object({
    1: {},
    2: {},
    3: {},
    4: {},
    5: {},
    6: {},
    7: {},
    8: {},
    9: {},
    10: {},
    11: {},
    12: {},
    13: {},
    14: {},
    15: {},
    16: {},
    17: {},
    18: {},
    19: {},
    20: {}
});

function reset() {
    1 < Object.entries(REVIEW).map(e => e[1]).filter(e => 0 < Object.keys(e).length).length && (animateErrorMessage(3e3, 600, 20, "Survey has been reset because you changed your Primary Area Of Expertise.", "show-reset-message", "remove-reset-message"), REVIEW = {
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
        10: {},
        11: {},
        12: {},
        13: {},
        14: {},
        15: {},
        16: {},
        17: {},
        18: {},
        19: {},
        20: {}
    })
}
let stepCounter = 0;
[textFieldLabels, textInputFields].forEach(e => {
    e.forEach(t => {
        ["click", "focus"].forEach(e => {
            t.addEventListener(e, e => {
                "LABEL" === e.target.nodeName && (e.target.nextElementSibling.focus(), e.target.nextElementSibling.click()), "INPUT" === e.target.nodeName && (e.target.offsetParent.children[1].style.borderBottom = "1px solid #2260ff", e.target.offsetParent.firstElementChild.classList += " move-up")
            })
        })
    }), e.forEach(e => {
        e.addEventListener("blur", e => {
            "INPUT" === e.target.nodeName && 0 === e.target.value.trim().length && (e.target.offsetParent.firstElementChild.classList.remove("move-up"), e.target.offsetParent.children[1].style.borderBottom = "")
        })
    })
}), 0 < textInputFields[0].value.length && (textInputFields[0].offsetParent.firstElementChild.classList += " move-up", e.target.offsetParent.children[1].style.borderBottom = "1px solid #2260ff");
let id, id2, id3, id4, bd;

function debounce(e, t) {
    id && clearTimeout(id), id = setTimeout(e, t)
}

function debounce2(e, t) {
    id2 && clearTimeout(id2), id2 = setTimeout(e, t)
}

function debounce4(e, t) {
    id4 && clearTimeout(id4), id4 = setTimeout(e, t)
}

function debounce3(e, t) {
    id3 && clearTimeout(id3), id3 = setTimeout(e, t)
}

function buttonDebounce(e) {
    bd && clearTimeout(bd), bd = setTimeout(e, 500)
}

function animateErrorMessage(s, a, n, o, i, r) {
    buttonDebounce(() => {
        if (userEmail.classList.add("empty-email-field"), errorText.innerText = "", 0 === errorText.innerText.length) {
            errorText.innerText = o;
            const t = errorMessage.offsetWidth;
            var e;
            for (e of ["remove-error-message", "remove-reset-message"]) errorMessage.classList.remove(e);
            errorMessage.classList.add(i), 1024 <= window.screen.availWidth && (errorMessage.style.width = n + "px"), window.screen.availWidth < 1024 && (errorMessage.style.width = "100%"), setTimeout(() => {
                1024 <= window.screen.availWidth ? errorMessage.style.width = t + "px" : errorMessage.style.width = "100%"
            }, a / 2), setTimeout(() => {
                errorText.style.opacity = "1"
            }, a), setTimeout(() => {
                let t = ["show-error-message", "show-reset-message"];
                1024 <= window.screen.availWidth && (errorMessage.style.width = n + "px"), errorText.style.opacity = "0", setTimeout(() => {
                    for (var e of t) errorMessage.classList.remove(e);
                    errorMessage.classList.add(r)
                }, a / 2)
            }, s), setTimeout(() => {
                1024 <= window.screen.availWidth && (errorMessage.style.width = "auto"), window.screen.availWidth < 1024 && (errorMessage.style.width = "100%"), userEmail.classList.remove("empty-email-field")
            }, s + a)
        }
    })
}

function showSending(t, s, a) {
    clearTimeout(id4), debounce3(() => {
        successText.innerText = t;
        const e = loaderDOM.offsetWidth;
        loaderDOM.classList.remove("remove"), loaderDOM.classList.add("show"), loaderDOM.style.backgroundColor = "orange", loaderDOM.style.width = s + "px", setTimeout(() => {
            loaderDOM.style.width = e + "px"
        }, 300), setTimeout(() => {
            successText.style.opacity = "1"
        }, a)
    }, a)
}

function showSent(e, t, s) {
    clearTimeout(id3), successText.style.opacity = "0", setTimeout(() => {
        successText.innerText = e, loaderDOM.style.backgroundColor = "#11bd05", loaderDOM.style.width = successText.scrollWidth + 50 + "px"
    }, 200), setTimeout(() => {
        successText.style.opacity = "1"
    }, 300), debounce4(() => {
        successText.style.opacity = "0", setTimeout(() => {
            loaderDOM.style.width = t + "px"
        }, 300), setTimeout(() => {
            loaderDOM.classList.remove("show"), loaderDOM.classList.add("remove")
        }, 600), setTimeout(() => {
            loaderDOM.style.width = "auto"
        }, 1e3)
    }, s)
}

function removeMessage() {
    successText.style.opacity = "0", setTimeout(() => {}, 300), setTimeout(() => {
        loaderDOM.classList.remove("show"), loaderDOM.classList.add("remove")
    }, 600), setTimeout(() => {
        loaderDOM.style.width = "auto"
    }, 1e3)
}

function validateEmail(e, t) {
    e = e.innerText || e.value.trim();
    return emailRegex.test(e) ? emailRegex.test(e) ? (usersEmailAddress = e, Questions.length, !0) : void 0 : (animateErrorMessage(3e3, 600, 20, "Please enter a valid email address.", "show-error-message", "remove-error-message"), !1)
}

function animateProgress(e) {
    var t = Object.entries(REVIEW).map(e => e[1]).filter(e => 0 < Object.keys(e).length),
        s = Object.keys(REVIEW).length,
        t = Math.floor(t.length / s * 100),
        a = Math.floor(t / 100 * 502);
    progressSVG.style.transition = "1s", progressSVG.style.strokeDashoffset = 502 - a, progress.innerHTML = t + "%", e >= Questions.length ? currentStage.innerHTML = e - 1 + " / " + s : currentStage.innerHTML = e + " / " + s
}

function sendEmail(a) {
    var n;
    if (0 === Object.entries(REVIEW).map(e => e[1]).filter(e => 0 === Object.keys(e).length).length) {
        var o = Object.values(REVIEW);
        let t = [];
        document.querySelector(".result");
        for (var i in o) t = "2" === i || "8" === i || "9" === i ? [...t, Object.values(o[i]).map(e => e.answerText).join(", ")] : [...t, Object.values(o[i])[0].answerText];
        let s = "";
        for (let e = 1; e <= t.length; e++) s += `<div id="test" style="background-color: blueviolet; padding: 10px 15px; border-radius:10px; width:auto; margin-top:30px">
						<h1 style="font-family: 'Merriweather', sans-serif; font-weight:800; font-size: 1.1rem; letter-spacing:.5px; padding: 0px; border-radius: 5px; width: auto;color:white; ">${n=e,2===n||3===n?Questions[n].question+t[0]:Questions[n].question}</h1>
						<p class="ra" style="color: #161b22; font-size:1rem; box-shadow:0px 20px 20px 10px black; background-color: white; padding:10px; border-radius:4px; font-family: 'Open Sans', sans-serif; font-weight: 800; margin-top:15px">${t[e-1]}</p>
					</div>`;
        var r = `<!DOCTYPE html>
						<html>
						<head>
							<meta charset="UTF-8">
							<title>Email Template</title>
							<link rel="preconnect" href="https://fonts.googleapis.com">
							<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
							<link href="https://fonts.googleapis.com/css2?family=Merriweather&family=Open+Sans&display=swap" rel="stylesheet">

							<style>
								body {
									font-family: 'Open Sans',system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;;
								}

								@media only screen and (max-width:600px){
									#body{padding:5px;background-color:red;}
								}
							</style>
						</head>
						<body id="body" style="
						font-family: 'Open Sans',system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
						margin: 0; padding: 0px; background-color: #FAF4FD; border-radius:10px;  font-size: 14px; line-height: 1.6; color: #333333;">

							<table width="100%" border="0" cellspacing="0" cellpadding="0">

								<tr>
									<td align="center" valign="top" style="">
										<table width="100%" border="0" cellspacing="00" cellpadding="00" style="width:100%; max-width:650px; border-collapse: seperate;
							border-spacing: 10px; margin: 0 auto; background-color: #FAF4FD; border-radius:10px">
											<tr style="border-radius:10px" style="width:100%; padding:10px">
												<td align="start" valign="top" style="width:100%; padding:10px" >
												<h1>🎉 Hurray!</h1>
												<p style="font-size:.9rem">Below are your answers to each Questions asked</p>
													${s}
												</td>
											</tr>
										</table>
									</td>
								</tr>
							</table>
						</body>
						</html>`;
        debounce(() => {
            showSending("Submitting Form...", 20, 600)
        }, 500);
        let e = {
            my_html: r,
            user: a
        };
        debounce2(() => {
            emailjs.send("service_p2qgmh6", "template_7m3cnp9", e, "o4O_xFoK52q_F2IdV").then(function (e) {
                showSent("Form Submitted Successfully", 20, 5e3), showCircleSVG(!1), submitingForm(starterPage, startQuestion), setTimeout(() => {
                    ContinueButton.style.display = "none", BackButton.classList.add("widen")
                }, 400), setTimeout(() => {
                    thankYou.style.display = "flex", starterPage.style.display = "none", startQuestion.style.display = "none"
                }, 600)
            }, function (e) {
                e = 412 === e.status ? "please try again later. Thank you." : 429 === e.status ? alert("Quota") : e.text;
                removeMessage(), animateErrorMessage(1e4, 600, 20, "Error occurred, " + (e || "no internet connection"), "show-error-message", "remove-error-message")
            })
        }, 2e3)
    }
}

function gotoNextStep(e, t) {
    const s = document.querySelector(".answer-field"),
        a = document.querySelector(".Question");
    if (0 === e) {
        showCircleSVG(!1);
        var n = 0 === userEmail.value.trim().length;
        if (n) return void animateErrorMessage(3e3, 600, 20, "Please enter your email address to continue.", "show-error-message", "remove-error-message");
        if (!n) {
            if (!validateEmail(userEmail, e)) return;
            goingOutOfWelcome(introText, startQuestion)
        }
    }
    if (++e >= t.length) {
        try {
            ChangeEmailButton.style.display = "flex"
        } catch (e) {}
        sendEmail(inner.innerText = usersEmailAddress), stepCounter = e, animateProgress(20)
    }
    if (e <= t.length && 0 < e) {
        body.classList.remove("soft"), backCircle.style.opacity = "0", controlButtons.classList.add("csoft"), thankYou.style.display = "none", debounce3(() => {
            ContinueButton.children[0].innerText = "Continue", ContinueButton.style.display = "flex", BackButton.style.display = "flex", ContinueButton.classList.remove("widen"), BackButton.classList.remove("widen")
        }, 500), showCircleSVG(!0);
        try {
            ChangeEmailButton.style.display = "none"
        } catch (e) {}
        try {
            if (Object.keys(REVIEW[e - 1]) && 0 === Object.keys(REVIEW[e - 1]).length) return void animateErrorMessage(3e3, 600, 20, "Please select an option.", "show-error-message", "remove-error-message")
        } catch (e) {}
        e <= t.length - 1 && 1 < e && continueDuringSurvey(a, s), setTimeout(() => {
            a.innerHTML = `<h1 class="qnumbering">${e}</h1>` + askQuestionsInteractively(e, t), displayAnswersInteractively(s, e, t)
        }, 500)
    }
    e >= t.length && (e = t.length), animateProgress(stepCounter = e)
}

function gotoPreviousStep(e, t) {
    const s = document.querySelector(".answer-field"),
        a = document.querySelector(".Question");
    --e <= 0 && (e = 0), animateProgress(stepCounter = e), e === parseInt(Object.keys(REVIEW).length) && backToForm(thankYou, startQuestion), e <= 0 ? (thankYou.style.display = "none", debounce3(() => {
        BackButton.style.display = "none", ContinueButton.classList.add("widen"), controlButtons.classList.remove("csoft"), startQuestion.style.display = "none", starterPage.style.display = "flex"
    }, 500), backToWelcome(introText, startQuestion), backCircle.style.opacity = "", showCircleSVG(!1)) : 0 < e && (setTimeout(() => {
        ContinueButton.style.display = "flex", BackButton.style.display = "flex", BackButton.classList.remove("widen"), ContinueButton.classList.remove("widen")
    }, 500), showCircleSVG(!0), continueDuringSurvey(a, s), setTimeout(() => {
        a.innerHTML = `<h1 class="qnumbering">${e}</h1>` + askQuestionsInteractively(e, t), displayAnswersInteractively(s, e, t)
    }, 500))
}

function markAlreadyChosenSelections(e) {
    var t = document.querySelectorAll(".ans-box");
    let s = Object.entries(REVIEW[e]).map(e => e[0]);
    t.forEach(t => {
        s.filter(e => {
            t.dataset.id === e && (t.classList.value.includes("textonlybox") && addCheckAnimationForTextBoxOnly(t.children[0], t), t.classList.value.includes("text-imgbox") && addCheckAnimationForImgTextBox(t.children[0], t), t.classList.value.includes("bare-ans") && addCheckAnimationForIconAndText(t.children[0], t), t.classList.value.includes("two-ans")) && addCheckAnimationForTwoAns(t.children[0], t)
        })
    })
}

function askQuestionsInteractively(e, t) {
    switch (e) {
        case 2:
        case 3:
            var s, a = [];
            for (s in REVIEW[1]) a.push(REVIEW[1][s].answerText);
            return t[e].question + ` ${a[0]} ?`;
        default:
            return t[e].question
    }
}

function displayAnswersInteractively(s, a, t) {
    function n(e, t) {
        s.innerHTML = "", s.classList = "", s.classList.add("answer-field", "animate__animated"), setTimeout(() => {
            switch (a) {
                case 1:
                case 9:
                case 10:
                    s.innerHTML += `
					<div class="text-imgbox ans-box" id="ss" data-answer="${t.text}" data-id="${e}">
						<div class="checker2" data-answer="${t.text}" data-id="${e}" ></div>
						<div class="image-container2" style="background-image:url(${t.img})" data-answer="${t.text}" data-id="${e}">
							<div class="shade" data-answer="${t.text}" data-id="${e}">
								<h2 class="ans-text img-ans-text"  data-answer="${t.text}" data-id="${e}">${t.text}</</h2>
							</div>
						</div>

					</div>`;
                    break;
                case 11:
                    s.classList.add("ans-with-2options"), s.innerHTML += `<div class="two-ans ans-box" id="two-ans-box" data-answer="${t.text}" data-id="${e}">
					<div class="tools-ans-checker"></div>
					<div id ="two-ans-logo-disp" style='background-image:url("${t.img}")'  class="ans-logo" data-answer="${t.text}" data-id="${e}"></div>
						<p class="textt" data-answer="${t.text}" data-id="${e}"> ${t.text}</p>
					</div>`;
                    break;
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 12:
                    s.innerHTML += `
					<div class="textonlybox ans-box" data-answer="${t.text}" data-id="${e}">
						<div class="text-checker" data-answer="${t.text}" data-id="${e}"></div>
						<div class="text-content" data-answer="${t.text}" data-id="${e}">
							<p class="box-text" data-answer="${t.text}" data-id="${e}">${t.text}</p>
						</div>
					</div>`;
                    break;
                case 3:
                    s.innerHTML += `
					<div class="bare-ans ans-box" data-answer="${t.text}" data-id="${e}">
					<div class="tools-ans-checker"></div>
					<div id ="logo-disp" style='background-image:url("${t.img}")'  class="ans-logo" data-answer="${t.text}" data-id="${e}"></div>
						<p data-answer="${t.text}" data-id="${e}"> ${t.text}</p>
					</div>`
            }
            switch (a) {
                case 1:
                case 9:
                case 10:
                    s.classList.add("eight-ans-grid");
                    break;
                case 3:
                    s.classList.add("icon-text-ans");
                    break;
                case 13:
                    s.classList.add("continous-two");
                    break;
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 14:
                case 15:
                    s.classList.add("ans-with-4ans-textonly");
                    break;
                case 16:
                case 17:
                case 18:
                case 12:
                    document.querySelectorAll(".ans-box").forEach(e => e.classList.add("five-texts-ans")), s.classList.add("ans-with-5option-textonly");
                    break;
                case 19:
                case 20:
                case 2:
                    s.classList.add("straight-ans")
            }
            handleAnswers(a)
        }, 0)
    }
    if (t[a].answers[0].text && t[a].answers.forEach((e, t) => {
            n(t, e)
        }), !t[a].answers[0].text) {
        function e(e) {
            t[a].answers[e].forEach((e, t) => {
                n(t, e)
            })
        }
        switch (parseInt(Object.keys(REVIEW[1])[0])) {
            case 0:
            case 2:
                e(0);
                break;
            case 1:
            case 3:
                e(1);
                break;
            case 4:
                e(2);
                break;
            case 5:
                e(3);
                break;
            case 6:
                e(4);
                break;
            case 7:
                e(5);
                break;
            default:
                return
        }
    }
}
const addCheckAnimationForImgTextBox = (e, t) => {
        e.classList.add("checked2")
    },
    removeCheckAnimationForImgTextBox = (e, t) => {
        e.classList.remove("checked2")
    },
    addCheckAnimationForTextBoxOnly = (e, t) => {
        e.classList.add("text-checked"), t.classList.add("textcontainer-checked")
    },
    removeCheckAnimationForTextBoxOnly = (e, t) => {
        e.classList.remove("text-checked"), t.classList.remove("textcontainer-checked")
    },
    addCheckAnimationForIconAndText = (e, t) => {
        e.classList.add("opacity"), t.classList.add("tools-ans-checked")
    },
    removeCheckAnimationForIconAndText = (e, t) => {
        e.classList.remove("opacity"), t.classList.remove("tools-ans-checked")
    },
    addCheckAnimationForTwoAns = (e, t) => {
        e.classList.add("opacity"), t.classList.add("two-ans-container-checked")
    },
    removeCheckAnimationForTwoAns = (e, t) => {
        e.classList.remove("opacity"), t.classList.remove("two-ans-container-checked")
    };

function addClass(e) {
    var t, s = [e.target, e.target.parentElement, e.target.parentElement.parentElement, e.target.parentElement.parentElement.parentElement];
    for (t in s) {
        if (s[t].classList.value.includes("text-imgbox")) {
            addCheckAnimationForImgTextBox(s[t].children[0], s[t]);
            break
        }
        if (s[t].classList.value.includes("textonlybox")) {
            addCheckAnimationForTextBoxOnly(s[t].children[0], s[t]);
            break
        }
        if (s[t].classList.value.includes("bare-ans")) {
            addCheckAnimationForIconAndText(s[t].children[0], s[t]);
            break
        }
        if (s[t].classList.value.includes("two-ans")) {
            addCheckAnimationForTwoAns(s[t].children[0], s[t]);
            break
        }
    }
}

function removeClass(e) {
    var t, s = [e.target, e.target.parentElement, e.target.parentElement.parentElement, e.target.parentElement.parentElement.parentElement];
    for (t in s) {
        if (s[t].classList.value.includes("text-imgbox")) {
            removeCheckAnimationForImgTextBox(s[t].children[0], s[t]);
            break
        }
        if (s[t].classList.value.includes("textonlybox")) {
            removeCheckAnimationForTextBoxOnly(s[t].children[0], s[t]);
            break
        }
        if (s[t].classList.value.includes("bare-ans")) {
            removeCheckAnimationForIconAndText(s[t].children[0], s[t]);
            break
        }
        if (s[t].classList.value.includes("two-ans")) {
            removeCheckAnimationForTwoAns(s[t].children[0], s[t]);
            break
        }
    }
}

function markAndSaveSelections(a, s, n) {
    a || (selectionChoice.innerText = "Please select only one.", s.forEach(e => {
        e.addEventListener("click", e => {
            var t = e.target;
            s.forEach(e => {
                e.classList.value.includes("text-imgbox") ? removeCheckAnimationForImgTextBox(e.children[0], e) : e.classList.value.includes("textonlybox") ? removeCheckAnimationForTextBoxOnly(e.children[0], e) : (e.classList.value.includes("bare-ans") && removeCheckAnimationForIconAndText(e.children[0], e), e.classList.value.includes("two-ans") && removeCheckAnimationForTwoAns(e.children[0], e))
            }), addClass(e), 1 === n && reset(), addAnswerToPersonObject(a, t.dataset.id, t.dataset.answer, n)
        })
    })), a && (selectionChoice.innerText = "You can select as many as you wish.", s.forEach(e => {
        e.addEventListener("click", e => {
            var t, s = [e.target, e.target.parentElement, e.target.parentElement.parentElement, e.target.parentElement.parentElement.parentElement];
            for (t in s) {
                if (s[t].classList.value.includes("text-imgbox") && s[t].children[0].classList.value.includes("checked2") || s[t].classList.value.includes("textonlybox") && s[t].children[0].classList.value.includes("text-checked") || s[t].classList.value.includes("bare-ans") && s[t].children[0].classList.value.includes("opacity") || s[t].classList.value.includes("two-ans") && s[t].children[0].classList.value.includes("opacity")) {
                    removeClass(e), removeAnswerToPersonObject(s[t].dataset.id, n);
                    break
                }(s[t].classList.value.includes("bare-ans") && !s[t].children[0].classList.value.includes("opacity") || s[t].classList.value.includes("textonlybox") && !s[t].children[0].classList.value.includes("text-checked") || s[t].classList.value.includes("text-imgbox") && !s[t].children[0].classList.value.includes("checked2") || s[t].classList.value.includes("two-ans") && s[t].children[0].classList.value.includes("opacity")) && (addClass(e), addAnswerToPersonObject(a, s[t].dataset.id, s[t].dataset.answer, n))
            }
        })
    }))
}

function moreThanOneSelectionIsPermitted(e) {
    switch (e) {
        case 3:
        case 9:
        case 10:
            return !0;
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
            return !1
    }
}

function handleAnswers(e) {
    var t = document.querySelectorAll(".ans-box"),
        s = moreThanOneSelectionIsPermitted(e);
    document.querySelectorAll(".end").forEach(e => {
        e.disabled = !0
    }), e <= Questions.length - 1 && 0 < e && (starterPage.style.display = "none", startQuestion.style.display = "flex", thankYou.style.display = "none", markAlreadyChosenSelections(e), markAndSaveSelections(s, t, e))
}

function removeAnswerToPersonObject(e, t) {
    delete REVIEW[t][e]
}

function addAnswerToPersonObject(e, t, s, a) {
    e && (REVIEW[a][t] = {
        ...REVIEW[a][t],
        answerText: s
    }), e || (REVIEW[a] = {
        [t]: {
            answerText: s
        }
    })
}

function keydownHandler(e) {
    stepCounter <= Object.values(REVIEW).length + 1 && ("Enter" !== e.key && "ArrowRight" !== e.key || gotoNextStep(stepCounter, Questions), "ArrowLeft" === e.key) && gotoPreviousStep(stepCounter, Questions)
}
changeEmailContainer.style.display = "none", inner.onfocus = () => {
    document.querySelector(".email").style.overflow = "scroll", inner.classList.remove("turndot", "turndot")
}, inner.onblur = () => {
    var e = document.querySelector(".email");
    inner.classList.add("turndot"), e.style.overflow = "hidden", editfield.innerText !== usersEmailAddress && validateEmail(editfield) && (changeEmailContainer.classList.remove("remove-change-email-modal"), changeEmailContainer.classList.add("show-change-email-modal"))
}, changeEmail.onclick = () => {
    sendEmail(usersEmailAddress = editfield.innerText), changeEmailContainer.classList.add("remove-change-email-modal")
}, cancel.onclick = () => {
    changeEmailContainer.classList.add("remove-change-email-modal")
}, ContinueButton.addEventListener("click", e => {
    debounce4(() => gotoNextStep(stepCounter, Questions), 100)
}), BackButton.addEventListener("click", e => {
    debounce4(() => gotoPreviousStep(stepCounter, Questions), 200)
}), window.addEventListener("keydown", keydownHandler), animateProgress(0);
export default REVIEW;